fit <- arrange(augment(modlss), carat)
highchart() %>%
hc_add_series(data, type = "scatter",
hcaes(x = carat, y = price, size = depth, group = cut)) %>%
hc_add_series(fit, type = "line", hcaes(x = carat, y = .fitted),
name = "Fit", id = "fit") %>%
hc_add_series(fit, type = "arearange",
hcaes(x = carat, low = .fitted - 2*.se.fit,
high = .fitted + 2*.se.fit),
linkedTo = "fit")
data("citytemp")
hc <- highchart() %>%
hc_xAxis(categories = citytemp$month) %>%
hc_add_series(name = "Tokyo", data = citytemp$tokyo) %>%
hc_add_series(name = "London", data = citytemp$london)
hc %>%
hc_chart(borderColor = '#EBBA95',
borderRadius = 10,
borderWidth = 2,
backgroundColor = list(
linearGradient = c(0, 0, 500, 500),
stops = list(
list(0, 'rgb(255, 255, 255)'),
list(1, 'rgb(200, 200, 255)')
)))
highchart()%>%
hc_add_series(pokemon, "scatter", hcaes(x = height, y = weight))%>%
hc_add_series(pokemon %>% count(height), "line", hcaes(x = height, y = n))
highchart()%>%
hc_add_series(pokemon, "scatter", hcaes(x = height, y = weight))%>%
hc_add_series(pokemon, "line", hcaes(x = attack, y = defence))
highchart()%>%
hc_add_series(pokemon, "scatter", hcaes(x = height, y = weight))%>%
hc_add_series(pokemon, "line", hcaes(x = attack, y = defense))
highchart()%>%
hc_add_series(pokemon, "scatter", hcaes(x = height, y = weight))%>%
hc_add_series(pokemon, "line", hcaes(x = attack, y = defense))
highchart()%>%
hc_add_series(pokemon, "scatter", hcaes(x = height, y = defense))%>%
hc_add_series(pokemon, "line", hcaes(x = attack, y = defense))
URL <- "http://graphics8.nytimes.com/newsgraphics/2016/01/15/drug-deaths/c23ba79c9c9599a103a8d60e2329be1a9b7d6994/data.json"
data("uscountygeojson")
data("unemployment")
data <-  fromJSON(URL) %>%
tbl_df() %>%
gather(year, value, -fips) %>%
mutate(year = sub("^y", "", year),
value = ifelse(is.na(value), 0, value))
install.packages("jsonlite")
URL <- "http://graphics8.nytimes.com/newsgraphics/2016/01/15/drug-deaths/c23ba79c9c9599a103a8d60e2329be1a9b7d6994/data.json"
data("uscountygeojson")
data("unemployment")
data <-  fromJSON(URL) %>%
tbl_df() %>%
gather(year, value, -fips) %>%
mutate(year = sub("^y", "", year),
value = ifelse(is.na(value), 0, value))
knitr::opts_chunk$set(echo = TRUE)
library(highcharter)
setwd("C:/Users/nsingh1/Desktop/EDA/Articles")
load("C:/Users/nsingh1/Desktop/EDA/Articles/.RData")
rm(p, con)
summary(as.factor(data$Symbol))
symol = as.data.frame(summary(as.factor(data$Symbol)))
View(symol)
View(data)
MultipleTimeSeries = data%>%
filter(Symbol %in% c("BTC", "LTC", "NMC"))%>%
select(-X1)
library(dplyr)
library(ggplot2)
library(anomalize)
library(tidyverse)
library(tibbletime)
library(lubridate)
MultipleTimeSeries = data%>%
filter(Symbol %in% c("BTC", "LTC", "NMC"))%>%
select(-X1)
MultipleTimeSeries%>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)
MultipleTimeSeries = data%>%
filter(Symbol %in% c("BTC", "LTC", "NMC"))%>%
select(-X1)%>%
arrange(Date)
MultipleTimeSeries%>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)
data("tidyverse_cran_downloads")
View(tidyverse_cran_downloads)
time_decompose(count)%>%
)
tidyverse_cran_downloads%>%
time_decompose(count)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)
View(tidyverse_cran_downloads)
View(data)
MultipleTimeSeries = data%>%
filter(Symbol %in% c("BTC", "LTC", "NMC"))%>%
select(-X1)%>%
arrange(Date)%>%
select(Date, Symbol, Close)
View(MultipleTimeSeries)
MultipleTimeSeries = data%>%
filter(Symbol %in% c("BTC", "LTC", "NMC"))%>%
select(-X1)%>%
select(Date, Symbol, Close)
View(MultipleTimeSeries)
MultipleTimeSeries%>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)
MultipleTimeSeries = data%>%
filter(Symbol %in% c("BTC", "LTC", "NMC"))%>%
select(-X1)%>%
select(Date, Symbol, Close)%>%
tbl_time()
MultipleTimeSeries = data%>%
filter(Symbol %in% c("BTC", "LTC", "NMC"))%>%
select(-X1)%>%
select(Date, Symbol, Close)%>%
tbl_time(Date)
View(MultipleTimeSeries)
MultipleTimeSeries%>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)
View(tidyverse_cran_downloads)
View(tidyverse_cran_downloads)
class(tidyverse_cran_downloads$date)
MultipleTimeSeries = data%>%
filter(Symbol %in% c("BTC", "LTC", "NMC"))%>%
select(Date, Symbol, Close)%>%
tbl_time(Date)
MultipleTimeSeries%>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)
class(MultipleTimeSeries$Date)
summary(as.factor(MultipleTimeSeries$Date))
MultipleTimeSeries%>%
time_decompose(Close)
View(MultipleTimeSeries)
timeSeriesBTC%>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)
MultipleTimeSeries = data%>%
filter(Symbol %in% c("BTC", "LTC"))%>%
select(Date, Symbol, Close)%>%
tbl_time(Date)
MultipleTimeSeries%>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)
MultipleTimeSeries = data%>%
filter(Symbol %in% c("BTC"))%>%
select(Date, Symbol, Close)%>%
tbl_time(Date)
MultipleTimeSeries%>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)
MultipleTimeSeries = data%>%
filter(Symbol %in% c("LTC"))%>%
select(Date, Symbol, Close)%>%
tbl_time(Date)
MultipleTimeSeries%>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)
MultipleTimeSeries = data%>%
filter(Symbol %in% c("NMC"))%>%
select(Date, Symbol, Close)%>%
tbl_time(Date)
MultipleTimeSeries%>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)
for (sym in unique(data$Symbol))
MultipleTimeSeries = data%>%
filter(Symbol == sym)%>%
select(Date, Symbol, Close)%>%
tbl_time(Date)
MultipleTimeSeries%>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)
for (sym in unique(data$Symbol))
data%>%
filter(Symbol == sym)%>%
select(Date, Symbol, Close)%>%
tbl_time(Date) %>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)+
ggtitle(sym)
for (sym in c("BTC", "NMC"))
data%>%
filter(Symbol == sym)%>%
select(Date, Symbol, Close)%>%
tbl_time(Date) %>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)+
ggtitle(sym)
data%>%
filter(Symbol == sym)%>%
select(Date, Symbol, Close)%>%
tbl_time(Date) %>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)+
ggtitle(sym)
sym = c("BTC", "MNC")
data%>%
filter(Symbol == sym)%>%
select(Date, Symbol, Close)%>%
tbl_time(Date) %>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 3, alpha_dots = 0.5)+
ggtitle(sym)
data%>%
filter(Symbol == sym)%>%
select(Date, Symbol, Close)%>%
tbl_time(Date) %>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 2, alpha_dots = 0.5)
for (sym in c("BTC", "NMC"))
{
data%>%
filter(Symbol == sym)%>%
select(Date, Symbol, Close)%>%
tbl_time(Date) %>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 2, alpha_dots = 0.5)
}
data%>%
select(Date, Symbol, Close)%>%
tbl_time(Date) %>%
time_decompose(Close)%>%
anomalize(remainder)%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 2, alpha_dots = 0.5)
View(MultipleTimeSeries)
View(tidyverse_cran_downloads)
View(MultipleTimeSeries)
data%>%
filter(Symbol %in% c("BTC", "NMC"))%>%
group_by(Date)%>%
summarise(n = n())%>%
filter(n == 1)
data%>%
select(Date, Symbol, Close)%>%
tbl_time(Date) %>%
time_decompose(Close, method = "stl")%>%
anomalize(remainder, method = "iqr")%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 2, alpha_dots = 0.5)
data%>%
filter(Symbol %in% c("BTC", "NMC"))%>%
select(Date, Symbol, Close)%>%
tbl_time(Date) %>%
time_decompose(Close, method = "stl")%>%
anomalize(remainder, method = "iqr")%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 2, alpha_dots = 0.5)
data%>%
filter(Symbol %in% c("BTC", "NMC"))%>%
select(Date, Symbol, Close)%>%
tbl_time(Date) %>%
arrange(Date, Symbol)%>%
time_decompose(Close, method = "stl")%>%
anomalize(remainder, method = "iqr")%>%
time_recompose()%>%
plot_anomalies(time_recomposed = T, ncol = 2, alpha_dots = 0.5)
knitr::opts_chunk$set(echo = TRUE)
library(highcharter)
library(ggplot2)
library(dplyr)
library(broom)
library(quantmod)
library(tidyverse)
library(lubridate)
data("pokemon")
glimpse(pokemon)
setwd("C:/Users/nsingh1/Desktop/EDA/Articles")
write.csv(pokemon, "pokemon.csv")
pokemon%>%
count(type_1)%>%
arrange(n)%>%
hchart(type = "bar", hcaes(x = type_1, y = n))
library(highcharter)
library(ggplot2)
library(dplyr)
library(broom)
library(quantmod)
library(tidyverse)
library(lubridate)
data("pokemon")
knitr::opts_chunk$set(echo = TRUE)
library(anomalize)
install.packages("anomalize")
library(anomalize)
library(dplyr)
library(ggplot2)
install.packages("debugr")
plot(cars)
knitr::opts_chunk$set(echo = TRUE)
myfunction <- function(x) {
justastring <- "Not much information here"
z <- 1
for(i in 1:x) {
z <- z * i
}
}
myfunction <- function(x) {
justastring <- "Not much information here"
z <- 1
for(i in 1:x) {
dwatch(crit = "z > 40000", objs = c("z"))
z <- z * i
}
invisible(z)
}
myfunction(10)
library(debugr)
myfunction <- function(x) {
justastring <- "Not much information here"
z <- 1
for(i in 1:x) {
z <- z * i
}
}
myfunction <- function(x) {
justastring <- "Not much information here"
z <- 1
for(i in 1:x) {
dwatch(crit = "z > 40000", objs = c("z"))
z <- z * i
}
invisible(z)
}
myfunction(10)
myfunction <- function(x) {
justastring <- "Not much information here"
z <- 1
for(i in 1:x) {
z <- z * i
}
}
myfunction <- function(x) {
justastring <- "Not much information here"
z <- 1
for(i in 1:x) {
dwatch(crit = "z > 40000", objs = c("z"))
z <- z * i
}
invisible(z)
}
myfunction(10)
myfunction(10)
View(myfunction)
debugr_switchOn()
myfunction(10)
View(myfunction)
View(myfunction)
install.packages("sparkr")
knitr::opts_chunk$set(echo = TRUE)
library(h2o)
h2o.init()
library(h2o)
h2o.init()
h2o.shutdown()
knitr::opts_chunk$set(echo = TRUE)
install.packages("reticulate")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
h2o.shutdown()
library(h2o)
h2o.init()
# Import a sample binary outcome train/test set into H2O
train <- h2o.importFile("https://s3.amazonaws.com/erin-data/higgs/higgs_train_10k.csv")
# Import a sample binary outcome train/test set into H2O
train <- h2o.importFile("higgs_train_10k.csv")
test <- h2o.importFile("higgs_test_5k.csv")
# Identify predictors and response
y <- "response"
x <- setdiff(names(train), y)
# For binary classification, response should be a factor
train[,y] <- as.factor(train[,y])
test[,y] <- as.factor(test[,y])
aml <- h2o.automl(x = x, y = y,
training_frame = train,
max_runtime_secs = 30)
# View the AutoML Leaderboard
lb <- aml@leaderboard
lb
#                                                model_id       auc   logloss
# 1    StackedEnsemble_AllModels_0_AutoML_20180503_085035 0.7816995 0.5603380
# 2 StackedEnsemble_BestOfFamily_0_AutoML_20180503_085035 0.7780683 0.5636519
# 3             GBM_grid_0_AutoML_20180503_085035_model_1 0.7742967 0.5656552
# 4             GBM_grid_0_AutoML_20180503_085035_model_0 0.7736082 0.5667454
# 5             GBM_grid_0_AutoML_20180503_085035_model_2 0.7704520 0.5695492
# 6             GBM_grid_0_AutoML_20180503_085035_model_3 0.7662087 0.5759679
#  mean_per_class_error      rmse       mse
# 1            0.3250067 0.4361930 0.1902644
# 2            0.3261921 0.4377744 0.1916464
# 3            0.3233579 0.4390083 0.1927283
# 4            0.3196441 0.4394696 0.1931335
# 5            0.3443406 0.4411033 0.1945721
# 6            0.3348417 0.4439429 0.1970853
# [9 rows x 6 columns]
# The leader model is stored here
aml@leader
# If you need to generate predictions on a test set, you can make
# predictions directly on the `"H2OAutoML"` object, or on the leader
# model object directly
pred <- h2o.predict(aml, test)  # predict(aml, test) also works
# or:
pred <- h2o.predict(aml@leader, test)
View(pred)
pred
# Import a sample binary outcome train/test set into H2O
train <- h2o.importFile("higgs_train_10k.csv")
test <- h2o.importFile("higgs_test_5k.csv")
# Identify predictors and response
y <- "response"
x <- setdiff(names(train), y)
# For binary classification, response should be a factor
train[,y] <- as.factor(train[,y])
test[,y] <- as.factor(test[,y])
aml <- h2o.automl(x = x, y = y,
training_frame = train,
max_runtime_secs = 300)
# View the AutoML Leaderboard
lb <- aml@leaderboard
lb
#                                                model_id       auc   logloss
# 1    StackedEnsemble_AllModels_0_AutoML_20180503_085035 0.7816995 0.5603380
# 2 StackedEnsemble_BestOfFamily_0_AutoML_20180503_085035 0.7780683 0.5636519
# 3             GBM_grid_0_AutoML_20180503_085035_model_1 0.7742967 0.5656552
# 4             GBM_grid_0_AutoML_20180503_085035_model_0 0.7736082 0.5667454
# 5             GBM_grid_0_AutoML_20180503_085035_model_2 0.7704520 0.5695492
# 6             GBM_grid_0_AutoML_20180503_085035_model_3 0.7662087 0.5759679
#  mean_per_class_error      rmse       mse
# 1            0.3250067 0.4361930 0.1902644
# 2            0.3261921 0.4377744 0.1916464
# 3            0.3233579 0.4390083 0.1927283
# 4            0.3196441 0.4394696 0.1931335
# 5            0.3443406 0.4411033 0.1945721
# 6            0.3348417 0.4439429 0.1970853
# [9 rows x 6 columns]
# The leader model is stored here
aml@leader
# If you need to generate predictions on a test set, you can make
# predictions directly on the `"H2OAutoML"` object, or on the leader
# model object directly
pred <- h2o.predict(aml, test)  # predict(aml, test) also works
# or:
pred <- h2o.predict(aml@leader, test)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(h2o)
h2o.init()
train <- h2o.importFile("https://s3.amazonaws.com/erin-data/higgs/higgs_train_10k.csv")
setwd("C:/Users/nsingh1/Desktop/EDA/Articles")
train <- h2o.importFile("train.csv")
test <- h2o.importFile("test.csv")
train[,y] <- as.factor(train[,y])
y <- "response"
x <- setdiff(names(train), y)
train[,y] <- as.factor(train[,y])
test[,y] <- as.factor(test[,y])
aml <- h2o.automl(x = x, y = y,
training_frame = train,
max_runtime_secs = 30)
lb <- aml@leaderboard
lb
aml@leader
lb
View(train)
install.packages("esquisse")
esquisse::esquisser()
esquisse::esquisser()
esquisse::esquisser(data = iris)
esquisse::esquisser(data = iris)
setwd("C:/Users/nsingh1/Desktop/EDA/Google Analytics")
